@page
@model HarelTech.WMS.App.Pages.Tasks.TransactionModel
@{
    ViewData["Title"] = "Transaction";
    var i = 0;
    var curType = (long)Model.CurrentTaskType;
    var sernflag = Model.TaskItem.SERNFLAG == "Y" ? "disabled" : "";
}

@Html.AntiForgeryToken()

<input type="hidden" id="task_type" value="@curType" />
<input type="hidden" id="priority_ready" value="false" />
<input type="hidden" id="total_tasks" value="@Model.TaskItem.TotalTasks" />
<input type="hidden" id="jsonTasks" value="@Model.TaskLotJson" />
<input type="hidden" id="SernFlagMode" value="@sernflag" />
<div class="animated flipInY fast" style="margin-top:20px;">
    <div class="accordion md-accordion m-3" id="accordionTs" role="tablist" aria-multiselectable="false">
        <!-- Accordion card -->
        <div class="card">
            <!-- Card header -->
            <div class="card-header" role="tab" id="headingTwoTs">
                <a class="collapsed" data-toggle="collapse" data-parent="#accordionTs" href="#collapseTwoTs"
                   aria-expanded="false" aria-controls="collapseTwoTs" style="color: black !important;">
                    <h5 class="mb-0 mr-1">
                        @Model.TaskItem.PARTDES <span class="float-right" style="color: #3DBFD9 !important;"><span id="complete_tasks">@Model.TaskItem.CompletedTasks</span>/@Model.TaskItem.TotalTasks</span>
                    </h5>
                </a>
            </div>

            <!-- Card body -->
            <div id="collapseTwoTs" class="collapse" role="tabpanel" aria-labelledby="headingTwoTs"
                 data-parent="#accordionEx1">
                <div class="card-body">
                    <div class="row mt-2" style="font-weight: 600 !important">
                        <div class="col-4">Ref:</div>
                        <div class="col-8">@Model.TaskItem.HWMS_REFNAME</div>
                    </div>
                    <div class="row mt-2" style="font-weight: 600 !important">
                        <div class="col-4">Order/Doc:</div>
                        <div class="col-8">@Model.TaskItem.HWMS_REFORDER</div>
                    </div>
                    <div class="row mt-2" style="font-weight: 600 !important">
                        <div class="col-4">Task #:</div>
                        <div class="col-8">@Model.TaskItem.HWMS_ITASKNUM</div>
                    </div>
                </div>
            </div>

        </div>
    </div>
    <!-- Search-->
    <div class="form-inline d-flex justify-content-center md-form form-sm active-cyan-2 mt-4">
        <input id="search_group" class="form-control form-control-sm mr-2 w-75" type="text" placeholder="Scan Lot"
               aria-label="Search Bin" autofocus autocomplete="off">
        <i class="fas fa-search" aria-hidden="true" onclick="search_on_list();"></i>
    </div>
</div>
@if (curType == 3)
{
    <div id="manual_add_lot" class="text-center">
        <a href="#" onclick="add_manual_lot();"><i class="fas fa-plus-circle"></i> Add Lot</a>
    </div>
}
<div id="task_lots" class="animated fadeInY" style="margin-bottom: 4rem !important;">
    @foreach (var item in Model.TaskLot)
    {
        var background = Model.TaskItem.SERNFLAG == "Y" ? "lightgray" : "white";
        var taskLot = Model.OpenedTaskLots.FirstOrDefault(w => w.HWMS_ITASK == Model.TaskItem.HWMS_ITASK
            && w.HWMS_LOT == item.HWMS_LOT);
        long itaskLot = 0;
        long Qty = 0;
        
        if (taskLot != null)
        {
            itaskLot = taskLot.HWMS_ITASKLOT;
            Qty = taskLot.Quantity;

        }

        @*<input type="hidden" id="lot_id" />*@
        <div id="card_@i" class="card m-2" data-lotnumber="@item.HWMS_ELOTNUMBER" 
             data-lot="@item.HWMS_LOT" data-taskid="@Model.TaskItem.HWMS_ITASK" data-serials="" 
             data-tasklotid="@itaskLot">
            <div class="card-body m-2">
                <div class="row" style="font-weight: 700 !important">
                    <div class="col-6">Lot #:</div>
                    <div class="col-6" style="color: #3DBFD9;">@item.HWMS_ELOTNUMBER</div>
                </div>
                <div class="row mt-1" style="font-size: 12px !important;">
                    <div class="col-6">Status:</div>
                    <div class="col-6" id="status_@i">@item.STATUS</div>
                </div>
                <div class="row mt-1" style="font-size: 12px !important;">
                    <div class="col-6">Exp:</div>
                    <div class="col-6" id="exp_date_@i">@item.ExpDate</div>
                </div>
                <hr />

                <div class="row mt-2" style="font-weight: 600 !important">
                    <div class="col-6">Available:</div>
                    <div class="col-6">@item.AVAILABLE @item.UNITNAME</div>
                </div>
                <div class="row mt-4" style="font-weight: 600 !important;background-color: #E9F5FF;">
                    <div class="col-4">From:</div>
                    <div class="col-8" id="frombin_@i">@item.FROMBIN</div>
                </div>
                <div class="row" style="font-weight: 600 !important;background-color: #E9F5FF;">
                    <div class="col-4">To:</div>
                    @if (!Model.ChangeToBin)
                    {<div class="col-8" id="span_tobin_@i">@Model.TaskItem.HWMS_ITASKTOBIN</div>}
                    else
                    {<div class="col-8">
                            <a data-toggle="modal" data-target="#binsModalPreview" data-spanid="span_tobin_@i">
                                <span id="span_tobin_@i" data-wow-iteration="5">@Model.TaskItem.HWMS_ITASKTOBIN</span>
                                <i class="fas fa-arrow-right float-right"></i>
                            </a>
                        </div>
                    }
                </div>
                <div class="row text-center mt-4">
                    <div class="col-5" style="font-weight: 600 !important;">Quantity:</div>
                    <div class="col-7">
                        <div class="def-number-input number-input safari_only" style="background-color:#3DBFD9;">
                            <button onclick="minusQty('qty_@i');" class="minus" @sernflag></button>
                            <input id="qty_@i" class="quantity" min="0" max="@item.AVAILABLE" name="quantity" value="@Qty" type="number" onchange="update_total_tasks('#qty_@i',@item.AVAILABLE);" required style="background-color: @background;" @sernflag>
                            <button onclick="plusQty('qty_@i');" class="plus" @sernflag></button>
                        </div>
                    </div>
                </div>
                @if (sernflag != "")
                {
                    var bin = curType != 3 ? Model.TaskItem.HWMS_ITASKFROMBIN : "";
                    var color = "#3DBFD9";
                    var showDelete = true;
                    if (Qty > 0)
                    {
                        color = "#FFD2D5";
                       // showDelete = true;
                    }
                    @if (!showDelete)
                    {
                        <div class="row mr-2 ml-2">
                            <a id="a_card_@i" data-toggle="modal" data-target="#serialsModalPreview" 
                               data-card="#card_@i" data-lot="@item.HWMS_ELOTNUMBER"
                               data-partid="@Model.TaskItem.PART" data-tasklotid="@itaskLot"
                               data-locname="@bin" data-serial="@item.HWMS_LOT" 
                               data-qty="@Model.TaskItem.TotalTasks"
                               class="btn btn-outline-cyan btn-block mt-2" style="color: @color;border-color: @color !important">
                                Add Serial numbers <i class="fas fa-arrow-right float-right"></i>
                            </a>
                        </div>
                    }
                    else
                    {
                        <div class="row mt-2">
                            <div class="col-2">
                                <a id="a_can_@i" class="mt-1" data-toggle="modal" data-target="#modalConfirmDeleteSerials" data-tasklotid="@itaskLot"
                                   data-card="#card_@i" data-alink="a_can_@i">
                                <i id="icon_@i" class="fas fa-trash fa-2x mt-2" style="color: @color !important;"></i>
                                </a>
                            </div>
                            <div class="col-10">
                                <a id="a_card_@i" data-toggle="modal" data-target="#serialsModalPreview" data-card="#card_@i"
                                   data-lot="@item.HWMS_ELOTNUMBER" data-partid="@Model.TaskItem.PART" data-tasklotid="@itaskLot"
                                   data-locname="@bin" data-serial="@item.HWMS_LOT" data-qty="@Model.TaskItem.TotalTasks"
                                   class="btn btn-outline-cyan btn-block mt-2" style="color: @color;border-color: @color !important;">
                                    Add Serial numbers <i class="fas fa-arrow-right float-right"></i>
                                </a>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
        i++;
    }

</div>
<!--Footer -->
<nav class="navbar fixed-bottom navbar-expand-lg text-center" style="background-color: #3DBFD9 !important">
    @*<button id="btn_login" class="btn btn-primary btn-block my-4 waves-effect" style="background-color:#3DBFD9 !important;color: white;">
            Post Transaction
            <i class="fas fa-arrow-right float-right"></i>
        </button>*@
    <p id="btn_complete_task" class="w-100 disabled btn-dark mt-2 text-white" onclick="complete_task();">Post Transaction <i class="fas fa-arrow-right mt-2" style="color:white !important"></i></p>
</nav>
<!--Modal: modalConfirmPartialCompleteTask-->
@await Html.PartialAsync("_modalConfirmPartialCompleteTask")
<!--Modal: modalConfirmCompleteTask-->
@await Html.PartialAsync("_modalConfirmCompleteTask")
<!-- Bins -->
@await Html.PartialAsync("_partialBins")
<!-- Serials -->
@await Html.PartialAsync("_partialSerials", Model.TaskItem)
<!--Delete Serials-->
@await Html.PartialAsync("_partialDeleteSerialsFromDB", Model.TaskItem)


<script>
    var tasksForm;
    var config;
    var filter;
    var totalQty = 0;
    var tobin = "";
    var card_serial;
    var card_serials;
    var currentDeleteLotSerials = 0;
    var currentDeletedCardSerials;
    $(document).ready(function () {
        $("#btn_menu").hide();
        $("#btn_back").attr("href", app.url + "/Tasks/TaskItems?taskType=@curType&refOrderZone=@Model.TaskItem.RefOrderOrZone");
        $("#btn_back").show();
            //get_group_Tasks(1);
        update_total_tasks();
        //fire if bin selected
        $("#binsModalPreview").on("shown.bs.modal", function (e) {
            tobin = $(e.relatedTarget).data('spanid');
            app.showLoader();
            $.get(app.url + "/Tasks/Transaction/?handler=Bins", function (data) {
                $("#list_bins").html(data);
            });
            app.hideLoader();
        });

        //fire if serial selected
        $("#serialsModalPreview").on("shown.bs.modal", function (e) {

            var lot = $(e.relatedTarget).data('lot');
            var partid = $(e.relatedTarget).data('partid');
            var locname = $(e.relatedTarget).data('locname');
            var serial = $(e.relatedTarget).data('serial');
            var iTaskLot = $(e.relatedTarget).data('tasklotid');
            currentDeletedCardSerials = e.relatedTarget.attributes[0].value;
            card_serial = $(e.relatedTarget).data('card');
            $("#serialsModalPreview #lot_number").html(lot);
            app.showLoader();
            $.get(app.url + "/Tasks/Transaction/?handler=Serials&partId=" + partid + "&lot=" + serial + "&locName=" +
                locname + "&serial=" + serial + "&iTaskLot=" +iTaskLot, function (data) {
                    $("#list_serials").html("");
                    $("#list_serials").html(data);
                    //$("#list_serials").toggle(false);
                    $("#search_serials").val("");
                    var cards = $("#list_serials .card");
                    $("#list_serials_selected").html("");
                    for (var i = 0; i < cards.length; i++) {
                        if (cards[i].dataset["chk"] !== "") {
                            change_serial_selection('#serial_card_' + i, false);
                            $('#serial_card_' + i).show();
                        }
                    }
                    $("#search_serials").focus();
            });
            app.hideLoader();
        });

        //fire if enter on search
        $("#search_group").keypress(function (event) {
            if (event.keyCode !== 13) return;
            search_on_list();
        });

        //fire if delete lot serials pressed
        $("#modalConfirmDeleteSerials").on("shown.bs.modal", function (e) {
             currentDeleteLotSerials = $(e.relatedTarget).data('tasklotid');
            currentDeletedCardSerials = $(e.relatedTarget).data('alink');
            card_serial = $(e.relatedTarget).data('card');
        });

        config = {username: '@Model.UserName', password: '@Model.Password',
        url: app.priorityUrl,
        language: 3,
        appname: 'wmsapp'};

        filter = {
        or: 0,
        ignorecase: 0,
        QueryValues:
            [
                {
                field: "HWMS_ITASKNUM",
                fromval: "@Model.TaskItem.HWMS_ITASKNUM",
                }
            ]
        };


    });

    function showMessage(message) {
        //if (message.type != "warning") {
        //    alert(message.message);
        //} else {
        if (confirm(message.message)) {
            message.form.warningConfirm(1);
        } else {
            message.form.warningConfirm(0);
        }
        //}
    }

    function updateFields() {

    }

    function search_on_list() {
        var input = document.getElementById("search_group");
        var filter = input.value.toLowerCase();
        var nodes = $("#task_lots .card");
        var show = false;
        for (i = 0; i < nodes.length; i++) {
            if (!filter || filter === '') {
                nodes[i].style.display = "block";
                continue;
            }
            if (nodes[i].innerText.toLowerCase().includes(filter)) {
                nodes[i].style.display = "block";
                show = true;
            } else {
                nodes[i].style.display = "none";
            }
        }
        if (!show && $("#manual_add_lot")) {
            app.presentToast("Bin not found.", top, "error");
        }

    }

    function plusQty(elm) {
        document.getElementById(elm).stepUp(1);
        update_total_tasks();
    }

    function minusQty(elm) {
        document.getElementById(elm).stepDown(1);
        update_total_tasks();
    }

    function update_total_tasks(elm, max) {
        if (elm) {
            var q = parseInt($(elm).val());
            if (q > max) {
                $(elm).val(max);
                return;
            }
        }

        var cards = $("#task_lots .card");
        var tot = 0;
        for (var i = 0; i < cards.length; i++) {
            var inpInt = parseInt($("#qty_" + i).val());
            tot += inpInt;
        }
        $("#complete_tasks").html(tot).fadeIn(500);
        if (tot > 0)
            $("#btn_complete_task").removeClass("btn-dark disabled");
        else
            $("#btn_complete_task").addClass("btn-dark disabled");

        totalQty = tot;
        return tot;
    }

    function complete_task() {
        var totalCount = update_total_tasks();
        var totalTasks = parseInt($("#total_tasks").val());
        $("#total_reported").html(totalCount);
        if (totalCount > totalTasks) {
            $("#modalConfirmPartialCompleteTask #p_message").html(`Quantity reported is higher than ${totalTasks} ins!`);
            $("#modalConfirmPartialCompleteTask").modal("show");
        }
        else if (totalCount === totalTasks)
        {
            $("#modalConfirmCompleteTask #p_message").html("Please Confirm");
            $("#modalConfirmCompleteTask").modal("show");
        }
        else {

            $("#modalConfirmPartialCompleteTask #p_message").html(`Quantity reported is lower than ${totalTasks} ins!`);
            $("#modalConfirmPartialCompleteTask").modal("show");
        }
    }

    function finalize_task(cmodel) {
        if (cmodel==='c')
            $("#modalConfirmCompleteTask").modal('hide')
        else
            $("#modalConfirmPartialCompleteTask").modal('hide')
        app.showLoader();


        //check is sernflag mode
        if ($("#SernFlagMode").val() !== "") {
            window.app.taskForm('@Model.UserName', '@Model.Password', filter, '@Model.Company', totalQty, @Model.TaskItem.HWMS_ITASK);
        }

        var breakLoop = false;
        var tasks = JSON.parse($("#jsonTasks").val());
        var taskLots = [];
        var len = taskLots.length;
        if (len === 0) //Receive new tasks
            len = $("#task_lots .card").length;

        for (var i = 0; i < len; i++) {
            var qty = parseInt($("#qty_" + i).val());
            if (qty === 0)
                continue;
            var serials = [];
            if (card_serials) {
                serials = card_serials.find(o => o.card === "#card_" + i).serials;
            }

            taskLots.push({
                "HWMS_ELOTNUMBER": $("#card_" + i).data("lotnumber").toString(),
                "Quantity": qty,
                "FROMBIN": $("#frombin_" + i).html(),
                "TOBIN": $("#span_tobin_" + i).html(),
                "ExpDate": !$("#exp_date_" + i).html() ? $("#exp_date_" + i).val() : $("#exp_date_" + i).html(),
                "HWMS_LOT": $("#card_" + i).data("lot"),
                "HWMS_ITASK": $("#card_" + i).data("taskid"),
                "STATUS": '',
                "EXPIRYDATE": 0,
                "AVAILABLE": 0,
                "UNITNAME": '',
                "HWMS_FCUSTNAME": $("#status_" + i).html(),
                "HWMS_TCUSTNAME": $("#status_" + i).html(),
                "Serials": serials
            });

            if (taskLots[i].FROMBIN === "" || taskLots[i].TOBIN === "") {
                app.presentToast("FROMBIN OR TOBIN can not be empty.", top, "error");
                $("#card_" + i).focus();
                breakLoop = true;
                app.hideLoader();
                break;
            }
            //if (taskLots[i].HWMS_ELOTNUMBER === "") {
            //    app.presentToast("Lot number can not be empty", top, "error");
            //    $("#card_" + i).focus();
            //    breakLoop = true;
            //    app.hideLoader();
            //    break;
            //    //$('body').scrollTo("#card_" + i);
            //}
        }
        if (breakLoop) return;
        //call add task
        $.ajax({
            type: "POST",
            url: app.url + "/Tasks/Transaction/?handler=AddTaskLots",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("RequestVerificationToken",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data:  JSON.stringify(taskLots) ,
            success: function (response) {
                 if (response.success)
                    window.app.taskForm('@Model.UserName', '@Model.Password', filter, '@Model.Company', totalQty, @Model.TaskItem.HWMS_ITASK);
                else {
                    app.presentToast("An error occured with sending task. Please try again...", top, "error");
                    app.hideLoader();
                }
            },
            failure: function (response) {
                console.log(response);
            },
            error: function (response) {
                console.log(response);
            },
            contentType: "application/json; charset=utf-8"
            //dataType: "json"
        });

        //window.app.AddLotRows(ctasks, $("#task_type").val());

    }

    function bin_selected(bin) {
        $("#binsModalPreview").modal('hide')
        $("#" + tobin).html(bin);
        //$("#" + tobin).val(bin);
        $("#" + tobin).addClass("animated flash");
    }

    function search_bin_list() {
        var input = document.getElementById("search_bin");
        var filter = input.value.toLowerCase();
        var nodes = $("#list_bins .card h5");

        for (i = 0; i < nodes.length; i++) {
            if (!filter || filter === '') {
                $("#list_bins #card_" + i).show(); //nodes[i].style.display = "block";
                continue;
            }

            var node = new String(nodes[i].innerText.toLowerCase());
            if (node.startsWith(filter)) {
                $("#list_bins #card_" + i).show();
            } else {
                $("#list_bins #card_" + i).hide();
            }
        }

    }

    function search_serials_list() {

        var input = document.getElementById("search_serials");
        var filter = input.value;
        var nodes = $("#list_serials .card h5 span");
        var show = false;
        if (!filter || filter === '') {
            show_serials_list = true;
            show_hide_serials_list();
            return;
        }

        for (i = 0; i < nodes.length; i++) {
            var node = nodes[i].innerText;

            if (node.startsWith(filter)) {
                $(nodes[i].dataset["card"]).fadeIn(100);
                show = true;
            } else {
                $(nodes[i].dataset["card"]).fadeOut(100);
            }
        }

        if (show) {
            $("#manual_add_serial").toggle(false);
        }
        else {
            $("#manual_add_serial").toggle(true);
        }

        $("#search_serials").focus().select();
    }

    function submit_selected_serials() {

        var chbs = $("#list_serials_selected .card");
        var serials = [];

        if (chbs.length === 0) {
            app.presentToast("No serial selected.", 1, "error");
            return;
        }

        for (var i = 0; i < chbs.length; i++) {
            var serial = chbs[i].dataset["serial"];
            var serialno = chbs[i].dataset["serialno"];
            serials.push({ "SerialId": parseInt(serial), "SerialNumber": serialno });
        }
         //submit the serial with task to save it
        var taskLots = [];
        card_serials = [];

        card_serials.push({ card: card_serial, serials: serials });
        var card_index = card_serial.replace('#card_', '');
        taskLots.push({
            "HWMS_ITASKLOT": parseInt($(card_serial).data("tasklotid")),
            "HWMS_ELOTNUMBER": $(card_serial).data("lotnumber").toString(),
            "Quantity": serials.length,
            "FROMBIN": $("#frombin_" + card_index).html(),
            "TOBIN": $("#span_tobin_" + card_index).html(),
            "ExpDate": !$("#exp_date_" + card_index).html() ? $("#exp_date_" + card_index).val() : $("#exp_date_" + card_index).html(),
            "HWMS_LOT": $(card_serial).data("lot"),
            "HWMS_ITASK": $(card_serial).data("taskid"),
            "STATUS": '',
            "EXPIRYDATE": 0,
            "AVAILABLE": 0,
            "UNITNAME": '',
            "HWMS_FCUSTNAME": $("#status_" + card_index).html(),
            "HWMS_TCUSTNAME": $("#status_" + card_index).html(),
            "Serials": serials
        });

        //call add task
        $.ajax({
            type: "POST",
            url: app.url + "/Tasks/Transaction/?handler=AddTaskLots",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("RequestVerificationToken",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data:  JSON.stringify(taskLots) ,
            success: function (response) {
                if (response.taskLotId > 0) {
                    //do if saved
                    var i = card_serial.replace("#card_", "");
                    $(card_serial + " .quantity").val(serials.length);
                    //$(card_serial).data("itasklot", response.taskLotId); //set tasklotid for future use
                    update_total_tasks();
                    $("#a_card_" + i).data("tasklotid", response.taskLotId);
                    $("#a_can_" + i).data("tasklotid", response.taskLotId);
                    $("#a_card_" + i).attr('style', 'border-color: #FFD2D5 !important;width:240px;');
                    $("#icon_" + i).attr('style', 'color: #FFD2D5 !important;');
                    $("#serialsModalPreview").modal('hide');
                    card_serial = "";
                }
                else {
                    app.presentToast("An error occured with sending task. Please try again...", top, "error");
                    app.hideLoader();
                    return;
                }
            },
            failure: function (response) {
                console.log(response);
            },
            error: function (response) {
                console.log(response);
            },
            contentType: "application/json; charset=utf-8"
            //dataType: "json"
        });

    }

    function add_manual_lot() {
        request = {
            "Id": $("#task_lots .card").length,
            "TaskId": parseInt("@Model.TaskItem.HWMS_ITASK"),
            "LotNumber": $("#search_group").val(),
            "PartId": parseInt("@Model.TaskItem.PART"),
            "SernFlag": "@Model.TaskItem.SERNFLAG",
            "TaskType": parseInt($("#task_type").val()),
            "FromBin": "@Model.TaskItem.HWMS_ITASKFROMBIN",
            "ToBin": "@Model.TaskItem.HWMS_ITASKTOBIN",
            "Qty": parseInt("@Model.TaskItem.TotalTasks")
        };

        $.ajax({
            type: "POST",
            url: app.url + "/Tasks/Transaction/?handler=AddNewLot",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("RequestVerificationToken",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },
            data: JSON.stringify(request),
            success: function (response) {
                $("#task_lots").prepend(response);
                $("#search_group").val("");
            },
            failure: function (response) {
                console.log(response);
            },
            error: function (response) {
                console.log(response);
            },
            contentType: "application/json; charset=utf-8"
            //dataType: "json"
        });


    }

    function remove_bin_card(card) {
        $("#task_lots #" + card).addClass('animated fadeOut');
        setTimeout(function () {
            $("#task_lots #" + card).remove();
            update_total_tasks();
        }, 1000);

    }

    function delete_open_task_serials() {
        if (currentDeleteLotSerials === 0) {
            $("#modalConfirmDeleteSerials").modal('hide');
            return;
        }
        $("#modalConfirmDeleteSerials").modal('hide');
        app.showLoader();
        $.get(app.url + "/Tasks/Transaction/?handler=DeleteOpenTaskSerials&taskLot=" + currentDeleteLotSerials, function (data) {
            app.hideLoader();
            if (data.success) {
                //extract card id
                var i = card_serial.replace("#card_", "");
                $("#qty_" + i).val("0");
                $("#icon_" + i).attr('style', 'color: #3DBFD9 !important;');
                update_total_tasks();
                $("#a_card_" + i).attr('style', 'border-coloer: #3DBFD9 !important;width:240px;');
                //app.presentToast()
            }
            else {

            }
        });

    }
</script>

<style>
    .number-input input[type="number"] {
        -webkit-appearance: textfield;
        -moz-appearance: textfield;
    }

    .number-input input[type=number]::-webkit-inner-spin-button,
    .number-input input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
    }

    .number-input {
        margin-bottom: 0.5rem;
    }

        .number-input button {
            -webkit-appearance: none;
            background-color: #3DBFD9;
            border: none;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin: 0;
            position: relative;
            color: white !important;
        }

            .number-input button:before,
            .number-input button:after {
                display: inline-block;
                position: absolute;
                content: '';
                height: 2px;
                transform: translate(-50%, -50%);
            }

            .number-input button.plus:after {
                transform: translate(-50%, -50%) rotate(90deg);
            }

        .number-input input[type=number] {
            text-align: center;
        }

        .number-input.number-input {
            border: 1px solid #ced4da;
            width: 10rem;
            border-radius: .25rem;
        }

            .number-input.number-input button {
                width: 2.6rem;
                height: .7rem;
            }

                .number-input.number-input button.minus {
                    padding-left: 10px;
                }

                .number-input.number-input button:before,
                .number-input.number-input button:after {
                    width: .7rem;
                    background-color: white;
                }

            .number-input.number-input input[type=number] {
                max-width: 4rem;
                padding: .5rem;
                border: 1px solid #ced4da;
                border-width: 0 1px;
                font-size: 1rem;
                height: 2rem;
                color: #495057;
            }

    @@media not all and (min-resolution:.001dpcm) {
        @@supports (-webkit-appearance: none) and (stroke-color:transparent) {

            .number-input.def-number-input.safari_only button:before,
            .number-input.def-number-input.safari_only button:after {
                margin-top: -.3rem;
            }
        }
    }
</style>

